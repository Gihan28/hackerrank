'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

const SinglyLinkedListNode = class {
    constructor(nodeData) {
        this.data = nodeData;
        this.next = null;
    }
};

const SinglyLinkedList = class {
    constructor() {
        this.head = null;
        this.tail = null;
    }

    insertNode(nodeData) {
        const node = new SinglyLinkedListNode(nodeData);

        if (this.head == null) {
            this.head = node;
        } else {
            this.tail.next = node;
        }

        this.tail = node;
    }
};

function printSinglyLinkedList(node, sep) {
    while (node != null) {
        process.stdout.write(String(node.data));

        node = node.next;

        if (node != null) {
            process.stdout.write(sep);
        }
    }
}

/*
 * Complete the 'reversePrint' function below.
 *
 * The function accepts INTEGER_SINGLY_LINKED_LIST llist as parameter.
 */

/*
 * For your reference:
 *
 * SinglyLinkedListNode {
 *     int data;
 *     SinglyLinkedListNode next;
 * }
 *
 */

function reversePrint(llist) {
    const stack = [];

    while (llist !== null) {
        console.log(stack);
        console.log("==========");
        stack.push(llist.data);
        llist = llist.next;
    
    }

    while (stack.length > 0) {
        console.log(stack.pop());
    }

}

function main() {
    // const tests = parseInt(readLine(), 10);

    // for (let testsItr = 0; testsItr < tests; testsItr++) {
    //     const llistCount = parseInt(readLine(), 10);

    //     let llist = new SinglyLinkedList();

    //     for (let i = 0; i < llistCount; i++) {
    //         const llistItem = parseInt(readLine(), 10);
    //         llist.insertNode(llistItem);
    //     }

    //     reversePrint(llist.head);
    // }

    const node1 = new SinglyLinkedListNode(10);
    const node2 = new SinglyLinkedListNode(20);
    const node3 = new SinglyLinkedListNode(30);
    const node4 = new SinglyLinkedListNode(40);
    const node5 = new SinglyLinkedListNode(50);
    const node6 = new SinglyLinkedListNode(60);
    const node7 = new SinglyLinkedListNode(70);
    const node8 = new SinglyLinkedListNode(80);
    const node9 = new SinglyLinkedListNode(90);

    node1.next = node2;
    node2.next = node3;
    node3.next = node4;
    node4.next = node5;
    node5.next = node6;
    node6.next = node7;
    node7.next = node8;
    node8.next = node9;

    reversePrint(node1);
}

main();
